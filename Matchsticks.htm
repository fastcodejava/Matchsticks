<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Matchsticks Puzzle Solver</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 50px;
    }
    label, select, input {
      font-size: 16px;
      margin: 10px 0;
      display: block;
    }
  </style>
</head>
<body>
  <h2>Matchsticks Puzzle Solver</h2>
  <label for="textbox">Enter a wrong matchsticks equation:</label>
  <input type="text" id="textbox" placeholder="Type something..." />

  <label for="dropdown">Matchsticks to move :</label>
  <select id="dropdown">
    <option value="1">1</option>
    <option value="2">2</option>
    <!--option value="option3">Option 3</option-->
  </select>

  <button onclick="solve()">Submit</button>

  <div id="output"></div>

  <script>
    var num1, num2, result;
	
	let identity = [{
			"destination": null,
			"add": null,
			"move": null
		}];

	// const SUPERSCRIPT1 = "&lt;sup style=\"vertical-align: super; font-size: smaller;\"&gt;1&lt;/sup&gt;";
	//const SUPERSCRIPT1 = "<sup>1</sup>";
	// const SUPERSCRIPT1 = "&sup1;";
	const SUPERSCRIPT1 = "^1";
	let conf = {
0 : [{
  "destination": 3,
  "add": -1,
  "move": 1
  }, {
  "destination": 5,
  "add": -1,
  "move": 1
}, {
  "destination": 2,
  "add": -1,
  "move": 1
}, {
  "destination": 8,
  "add": 1,
  "move": 0
  }, {
  "destination": 9,
  "add": 0,
  "move": 1
  }, {
  "destination": 6,
  "add": 0,
  "move": 1
  }
  ],
1 : [{
  "destination": 11,
  "add": 2,
  "move": 0
  }, {
  "destination": 3,
  "add": 3,
  "move": 0
}, {
  "destination": 7,
  "add": 1,
  "move": 0
}, {
  "destination": 4,
  "add": 2,
  "move": 0
}, {
  "destination": 11,
  "add": 2,
  "move": 0
}
  ],
2 : [{
  "destination": 5,
  "add": 0,
  "move": 2 
  }, {
  "destination": 3,
  "add": 0,
  "move": 1 
  }, {
  "destination": 6,
  "add": 1,
  "move": 1 
  }, {
  "destination": 0,
  "add": 1,
  "move": 1 
  }, {
  "destination": 8,
  "add": 2,
  "move": 0 
  }, {
  "destination": 9,
  "add": 1,
  "move": 1 
  } ],
3 : [{
  "destination": 5,
  "add": 0,
  "move": 1
  }, {
  "destination": 0,
  "add": 1,
  "move": 1
  }, {
  "destination": 2,
  "add": 0,
  "move": 1
  }, {
  "destination": 4,
  "add": -1,
  "move": 1
  }, {
  "destination": 6,
  "add": 1,
  "move": 1 
  }, {
  "destination": 7,
  "add": -2,
  "move": 0 
  }, {
  "destination": 8,
  "add": 2,
  "move": 0 
  }, {
  "destination": 9,
  "add": 1,
  "move": 0 
  }],
4 : [{
  "destination": 11,
  "add": 0,
  "move": 1
  }, {
  "destination": 1,
  "add": -2,
  "move": 0
  }, {
  "destination": 3,
  "add": 1,
  "move": 1
  }, {
  "destination": 5,
  "add": 1,
  "move": 1
  }, {
  "destination": 7,
  "add": -1,
  "move": 1
  }, {
  "destination": 9,
  "add": 2,
  "move": 0
  }],
5 : [{
  "destination": 0,
  "add": 1,
  "move": 1
  }, {
  "destination": 2,
  "add": 0,
  "move": 2
  }, {
  "destination": 3,
  "add": 0,
  "move": 1
  }, {
  "destination": 6,
  "add": 1,
  "move": 0
  }, {
  "destination": 7,
  "add": -1,
  "move": 1
  }, {
  "destination": 8,
  "add": 2,
  "move": 0
  }, {
  "destination": 9,
  "add": 1,
  "move": 0
  }],

6 : [{
  "destination": 0,
  "add": 0,
  "move": 1
  }, {
  "destination": 3,
  "add": -1,
  "move": 1
  }, {
  "destination": 5,
  "add": -1,
  "move": 0
  }, {
  "destination": 8,
  "add": 1,
  "move": 0
  }, {
  "destination": 9,
  "add": 0,
  "move": 1
  }],
7 : [{
  "destination": 1,
  "add": -1,
  "move": 0
  }, {
  "destination": 3,
  "add": 2,
  "move": 0
  }, {
  "destination": 4,
  "add": 1,
  "move": 1
  }, {
  "destination": 11,
  "add": 1,
  "move": 1
  }],
8 : [{
  "destination": 0,
  "add": -1,
  "move": 0
  }, {
  "destination": 5,
  "add": -2,
  "move": 0
  }, {
  "destination": 2,
  "add": -2,
  "move": 0
  }, {
  "destination": 3,
  "add": -2,
  "move": 0
  }, {
  "destination": 6,
  "add": -1,
  "move": 0
  }, {
  "destination": 9,
  "add": -1,
  "move": 0
  }, {
  "destination": 10,
  "add": 1,
  "move": 1
  }, {
  "destination": 12,
  "add": 0,
  "move": 2
  }, {
  "destination": 13,
  "add": 0,
  "move": 2
  }, {
  "destination": 15,
  "add": 0,
  "move": 2
  }],
9 : [{
  "destination": 0,
  "add": 0,
  "move": 1
  }, {
  "destination": 3,
  "add": -1,
  "move": 0
  }, {
  "destination": 2,
  "add": -1,
  "move": 1
  }, {
  "destination": 4,
  "add": -2,
  "move": 0
  }, {
  "destination": 5,
  "add": -1,
  "move": 0
  }, {
  "destination": 6,
  "add": 0,
  "move": 1
  }, {
  "destination": 8,
  "add": 1,
  "move": 0
  }],
10 : [{
  "destination": 0,
  "add": -2,
  "move": 0
  }, {
  "destination": 8,
  "add": -1,
  "move": 1,
  }],
11 : [{
  "destination": 4,
  "add": 0, 
  "move": 1
  }, {
  "destination": 7,
  "add": -1,
  "move": 1
  }, {
  "destination": 10,
  "add": 2,
  "move": 0
  }]
};
	
	
    function solve() {
      const text = document.getElementById('textbox').value;
      const dropdown = document.getElementById('dropdown').value;
	  conf = addToConfiguration(conf);
	  //console.log(JSON.stringify(conf));
	  const arr = parseInput(text, "=");
	  const operation = arr[0];
	  result = arr[3];
	  num1 = arr[1];
	  num2 = arr[2];
	  console.log(num1 + " " + num2 + " " + result);
	  const sticksToMove = parseInt(dropdown);
	  var sticksMoved = 0, sticksFloating = 0;
	  const conf1 = addIdentity(conf[num1], num1);
	  const conf2 = addIdentity(conf[num2], num2);
	  const conf3 = addIdentity(conf[arr[3]], arr[3]);
	  var results = [];
//	  console.log(num1 + " " + JSON.stringify(conf1));
//	  console.log(num2 + " " + JSON.stringify(conf2));
//	  console.log(arr[3] + " " + JSON.stringify(conf3));
		for (let i = 0; i < conf1.length; i++) {
			var sticksMoved1 = conf1[i].move;
			var sticksFloating1 = -1 * conf1[i].add;
			if (conf1[i].add < 0) {
				sticksMoved1 += -1 * conf1[i].add;
			}		
		if (Math.abs(sticksFloating1) <= sticksToMove && sticksMoved1 <= sticksToMove) {
			// console.log("This is loop iteration #" + i);
					
			for (let j = 0; j < conf2.length; j++) { //
				var sticksMoved2 = sticksMoved1 + conf2[j].move;
				var sticksFloating2 = -1 * conf2[j].add + sticksFloating1;

				if (conf2[j].add < 0) {
					sticksMoved2 += -1 * conf2[j].add;
				}
				if (sticksMoved2 <= sticksToMove && Math.abs(sticksFloating2) <= sticksToMove) {	
				// console.log(sticksFloating + " " + sticksMoved);
				for (let k = 0; k < conf3.length; k++) {
					// console.log(sticksFloating + " " + sticksMoved + " " + sticksToMove + " " + conf2[j].add);
					// console.log(conf3);
					var sticksMoved3 = sticksMoved2 + conf3[k].move;
					var sticksFloating3 = sticksFloating2 + -1 * conf3[k].add;
					if (conf3[k].add < 0) {
						sticksMoved3 += -1 * conf3[k].add;
					}
					if (sticksMoved3 <= sticksToMove && Math.abs(sticksFloating3) <= sticksToMove) {
						//console.log(sticksFloating + " " + sticksMoved + " " + sticksToMove);
						//console.log(conf1[i].destination + " " + conf2[j].destination + " " + conf3[k].destination);
						//resultStr = resultStr ? resultStr : verifyAndCreateResponse(conf1[i].destination, conf2[j].destination, conf3[k].destination, operation, sticksFloating3);
						const reslt = verifyAndCreateResponse(conf1[i].destination, conf2[j].destination, conf3[k].destination, operation, sticksFloating3, sticksToMove - sticksMoved3);
                        if (reslt.length > 0) {
                            results = results.concat(reslt);
                        }
						// if (Array.isArray(reslt)) {
                        //   results = results.concat(reslt);
                        // } else if (reslt) {
                        //   results.push(reslt);
                        // }
						// console.log(results);
					}
				}
				//sticksMoved = conf1[i].move != null ? conf1[i].move : 0;
				//sticksFloating = conf1[i].add != null  ? -1 * conf1[i].add : 0;
				//if (conf1[i].add != null && conf1[i].add < 0) {
					//sticksMoved = conf1[i].add;
				//}
			}
			}
		}
		}

	  
      const output = `You entered: "${text}" and selected: "${dropdown}"`;
      //document.getElementById('output').textContent = num1 + ' ' + operation + ' ' + num2 + ' = ' + result + ' ' + JSON.stringify(conf[num1]);
      document.getElementById('output').textContent = results;
    }
	
	function parseInput(str, delim) {
		const arr = [];
		// 1 + 5 = 8
		const i = str.indexOf(delim);
		arr[3] = parseInt(str.substring(i+1).trim());
		const s = str.substring(0, i).trim();
		var j = str.indexOf("+");
		if (j > 0) {
			arr[0] = "+";
			arr[1] = parseInt(s.substring(0, j).trim());
			arr[2] = parseInt(s.substring(j+1).trim());
			return arr;
		}
		var j = str.indexOf("-");
		if (j > 0) {
			arr[0] = "-";
			arr[1] = parseInt(s.substring(0, j).trim());
			arr[2] = parseInt(s.substring(j+1).trim());		
		}
		return arr;
	}
	
	function addIdentity(arr, num) {
		const ar = [{
			"destination": num,
			"add": 0,
			"move": 0}];
		return arr ? ar.concat(arr) : ar;
	}

	function verifyAndCreateResponse(numb1, numb2, numb3, op, stcksFlting, movesRemaining) {
		// console.log(numb1 + " "	 + numb2 + " " + numb3 + "  " + stcksFlting + " " + movesRemaining);
        let results = [];
		switch (op) {
			case "+": {
				if (stcksFlting === 0 && movesRemaining == 0 && numb1 + numb2 === numb3) {
					results.push(createResponse(numb1, numb2, numb3, op));
				}
				if (stcksFlting === 1) {
					if (numb1 + numb2 === numb3) {
						results.push(createResponseWithSuperscript(numb1, numb2, numb3, op));
					}
					if (-1*numb1 + numb2 === numb3) {
						results.push(createResponse(-1*numb1, numb2, numb3, op));
					}
					if (numb1 + numb2 === -1*numb3) {
						results.push(createResponse(numb1, numb2, -1*numb3, op));
					}
				}
				if (stcksFlting === -1 && movesRemaining > 0) {
					if (numb1 - numb2 === numb3) {
						results.push(createResponse(numb1, numb2, numb3, "-"));
					}					
				}
				if (stcksFlting === 2 && numb1 + numb2 === numb3) { // TODO
					results.push(createResponse(numb1, numb2, numb3, "+"));
				}
				if (stcksFlting === 2 && -numb1 + numb2 === -numb3) { // TODO
					results.push(createResponse(-numb1, numb2, -numb3, "+"));
				}
			}
				break;
			case "-": {
				if (stcksFlting === 0 && movesRemaining == 0 && numb1 - numb2 === numb3) {
					results.push(createResponse(numb1, numb2, numb3, op));
				}
				if (stcksFlting === 1) {
					if (numb1 + numb2 === numb3) {
						results.push(createResponse(numb1, numb2, numb3, "+"));
					}
					if (numb1 - numb2 === numb3 && movesRemaining === 0) {
						results.push(createResponseWithSuperscript(numb1, numb2, numb3, op));
					}
					if (-1*numb1 - numb2 === numb3) {
						results.push(createResponse(-1*numb1, numb2, numb3, op));
					}
					if (numb3 > 0 && numb1 - numb2 === -1*numb3) {
						results.push(createResponse(numb1, numb2, -1*numb3, op));
					}
				}
				if (stcksFlting === 2) {
					if (-1*numb1 + numb2 === numb3) {
						results.push(createResponse(-1*numb1, numb2, numb3, "+"));
					}
					if (-numb1 - numb2 === -numb3) {
						results.push(createResponse(-numb1, numb2, -numb3, "-"));
					}
					if (numb1 + numb2 === numb3) {
						results.push(createResponseWithSuperscript(numb1, numb2, numb3, "+"));
					}
				}
				}
				break;
		}
		return results;
	}

	function addToConfiguration(conf) {
		Object.keys(conf).forEach(key => {
			// console.log(`${key}: ${conf[key]}`);
			console.log(key);
			const key1 = 10 + parseInt(key);
			if (!conf.hasOwnProperty(key1)) {
				conf[key1] = [];
			}
          console.log(conf[key1]);
          if (conf[key1].length === 0) {
				//const arr = Array.from(conf[key]);
				const arr = JSON.parse(JSON.stringify(conf[key]));
              // if (key === 6) console.log(arr);
				for (let i = 0; i < conf[key].length; i++) {
					const num = conf[key][i];
                    // console.log(num);
                    // console.log(arr[i]);
                    const dest = num.destination;
					arr[i].destination = dest < 10 ? 10 + parseInt(dest) : 100 + parseInt(dest);
				}
				//const arr1 = JSON.parse(JSON.stringify(arr));
					arr.push({
						destination: parseInt(key),
						add: -2,
						move: 0
					});					
//				for (let i = 0; i < arr.length; i++) {
//					arr1.push({
//						destination: arr[i].destination - 10,
//						add: -2,
//						move: 0
//					});					
//				}
				conf[key1] = conf[key1].concat(arr);
			}
		});
		return conf;
	}
	
	function createResponse(numb1, numb2, numb3, op) {
		return numb1 + " " + op + " " + numb2 + " = " + numb3;
	}

	function createResponseWithSuperscript (numb1, numb2, numb3, op) {
		return [numb1 + SUPERSCRIPT1 + " " + op + " " + numb2 + " = " + numb3,
		      numb1 + " " + op + " " + numb2 + SUPERSCRIPT1 + " = " + numb3,
		      numb1 + " " + op + " " + numb2 + " = " + numb3 + SUPERSCRIPT1];
	}

  </script>
</body>
</html>
